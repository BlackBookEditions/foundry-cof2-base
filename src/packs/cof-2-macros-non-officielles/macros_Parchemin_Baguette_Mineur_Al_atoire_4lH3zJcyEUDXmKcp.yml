name: Parchemin/Baguette Mineur AlÃ©atoire
type: script
command: |-
  // ðŸ“œ Macro Foundry VTT : Tirage multi-tables + sous-tables conditionnelles

  // Tables principales
  const TABLES = [
    { name: "Parchemin ou Baguette", label: "Parchemin ou Baguette" },
  ];

  let lines = [];

  for (let i = 0; i < TABLES.length; i++) {
    const { name, label } = TABLES[i];
    const table = game.tables.getName(name);
    if (!table) {
      ui.notifications.warn(`Table introuvable : ${name}`);
      continue;
    }

    // Tirage
    const { results } = await table.roll({ recursive: true });
    for (const r of results) {
      let txt = "";
      if (typeof r.getHTML === "function") txt = (await r.getHTML()).trim();
      else txt = r.description?.trim() || "";
      if (!txt) txt = "(rÃ©sultat vide)";

      let img = "";
      if (r.img && r.img.trim()) img = r.img.trim();
      else if (r.data?.img && r.data.img.trim()) img = r.data.img.trim();
      const imgTag = (img && !img.includes("icons/svg/d20-black.svg")) ? `<img src="${img}" width="50">` : "";

      lines.push(`<p><strong>${txt}</strong>${imgTag}</p>`);

      // ðŸ“Œ DÃ©tection du rÃ©sultat de la 1re table
      if (i === 0) {
        if (txt.toLowerCase().includes("parchemin")) {
          await rollSubTables([
            { name: "Parchemin/Baguette : Voie du Sort inscrit", label: "Voie du sort" },
            { name: "Parchemin/Baguette Mineur : Rang de la voie", label: "Rang du sort" }
          ]);
        }
        else if (txt.toLowerCase().includes("baguette")) {
          await rollSubTables([
            { name: "Parchemin/Baguette : Voie du Sort inscrit", label: "Voie du sort" },
            { name: "Parchemin/Baguette Mineur : Rang de la voie", label: "Rang du sort" },
            { name: "Baguette : Nombre de charge", label: "Nombre de charge" }
          ]);
        }
      }
    }
  }

  // ðŸ“Œ Construction du message final dans le format demandÃ©
  const content = `
    <div class="macro-rolltables-results">
      <h5 style="margin:0; margin-top:5px">Sorts Mineur</h5>
      ${lines.join("")}
    </div>
  `.trim();

  await ChatMessage.create({
    speaker: ChatMessage.getSpeaker(),
    content
  });

  // --- Fonction pour lancer des sous-tables ---
  async function rollSubTables(subTables) {
    for (const { name: stName, label: stLabel } of subTables) {
      const subTable = game.tables.getName(stName);
      if (!subTable) {
        ui.notifications.warn(`Sous-table introuvable : ${stName}`);
        continue;
      }
      const { results: subResults } = await subTable.roll({ recursive: true });
      for (const sr of subResults) {
        let sTxt = (typeof sr.getHTML === "function") ? (await sr.getHTML()).trim() : sr.description?.trim() || "";
        let sImg = (sr.img && !sr.img.includes("icons/svg/d20-black.svg")) ? sr.img.trim() : "";
        const sImgTag = sImg ? `<img src="${sImg}" width="50">` : "";
        lines.push(`<p><strong>${sTxt}</strong>${sImgTag}</p>`);
      }
    }
  }
img: icons/sundries/scrolls/scroll-yellow-teal.webp
author: LEtUoNWt5mYBIjrk
scope: global
folder: null
flags: {}
_stats:
  compendiumSource: null
  duplicateSource: null
  exportSource: null
  coreVersion: '13.346'
  systemId: co
  systemVersion: 13.344.0
  createdTime: 1755213997384
  modifiedTime: 1755213997384
  lastModifiedBy: LEtUoNWt5mYBIjrk
_id: 4lH3zJcyEUDXmKcp
sort: 0
ownership:
  default: 0
  LEtUoNWt5mYBIjrk: 3
_key: '!macros!4lH3zJcyEUDXmKcp'
